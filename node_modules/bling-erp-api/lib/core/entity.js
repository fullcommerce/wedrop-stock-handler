"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _BaseEntity_apiKey;
Object.defineProperty(exports, "__esModule", { value: true });
const createError_1 = __importDefault(require("./helpers/createError"));
const qs = __importStar(require("querystring"));
const xml2js = __importStar(require("xml2js"));
class BaseEntity {
    constructor(api, apiKey) {
        _BaseEntity_apiKey.set(this, void 0);
        this.api = api;
        __classPrivateFieldSet(this, _BaseEntity_apiKey, apiKey, "f");
        this.qs = qs;
        this.xml2js = xml2js;
        this.singularName = '';
        this.pluralName = '';
    }
    all(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._getAll(this.pluralName, options && options.params);
        });
    }
    find(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._find(this.singularName, id, options && options.params, options && options.raw);
        });
    }
    findBy(options, raw) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options) {
                throw (0, createError_1.default)('No options passed to `.findBy()` method', 500, options, 'ERR_INCORRECT_OPTIONS_ARG');
            }
            return yield this._getAll(this.pluralName, options, raw);
        });
    }
    create(data, raw) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._create(this.singularName, data, raw);
        });
    }
    update(id, data, raw) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._update(this.singularName, id, data, raw);
        });
    }
    delete(id, raw) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._delete(this.singularName, id, raw);
        });
    }
    /**
     * Retrieve all entities from the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param params The query params for the request sent by the user.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns An array of entities.
     */
    _getAll(endpoint, rawParams, raw = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // @TODO: refactor filter logic to actually work
            const entities = [];
            const params = {};
            if (rawParams) {
                const typedParams = rawParams;
                const filters = Object.keys(rawParams)
                    .map((key) => typedParams[key] ? `${key}[${typedParams[key]}]` : null)
                    .filter((item) => !!item)
                    .join(';');
                params.filters = filters;
            }
            let hasMore = true;
            let reqCount = 0;
            let page = 1;
            while (hasMore) {
                const response = yield this.api.get(`/${endpoint}/page=${page}/json`, {
                    params
                });
                const rawData = response.data;
                const data = rawData.retorno;
                if (data.erros) {
                    hasMore = false;
                }
                else {
                    const rawNewEntities = data;
                    const newEntities = rawNewEntities[this.pluralName];
                    const singularEntities = newEntities.map((item) => item[this.singularName]);
                    for (const entity of singularEntities) {
                        entities.push(entity);
                    }
                }
                page++;
                reqCount++;
                if (reqCount === 3) {
                    const sleep = new Promise((resolve) => {
                        setTimeout(resolve, 1000);
                    });
                    yield sleep;
                    reqCount = 0;
                }
            }
            if (raw) {
                return {
                    retorno: {
                        [this.pluralName]: entities.map((entity) => ({
                            [this.singularName]: entity
                        }))
                    }
                };
            }
            else {
                return entities;
            }
        });
    }
    /**
     * Retrieve one entity from the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity id.
     * @param params The query params for the request sent by the user.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The found entity.
     */
    _find(endpoint, id, params = undefined, raw = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw (0, createError_1.default)('The "id" argument must be a number or string.', 500, id, 'ERR_INCORRECT_ID_ARG');
            }
            const response = yield this.api.get(`/${endpoint}/${id}/json`, {
                params
            });
            const data = response.data;
            if (data.retorno.erros) {
                const errReturn = data.retorno;
                let errData;
                if (raw) {
                    errData = { retorno: errReturn };
                }
                else {
                    // maybe enhance it to include JSON API standards?
                    const rawErrData = errReturn.erros;
                    errData = rawErrData.map((err) => err.erro);
                }
                throw (0, createError_1.default)('Error on find method after request call', response.status, errData, 'ERR_FIND_METHOD');
            }
            else {
                if (raw) {
                    return data;
                }
                else {
                    const rawResponse = data.retorno;
                    const rawEntity = rawResponse[this.pluralName];
                    if (rawEntity.length === 1) {
                        return rawEntity[0][this.singularName];
                    }
                    else {
                        return rawEntity.map((entity) => entity[this.singularName]);
                    }
                }
            }
        });
    }
    /**
     * Create an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param data The data for the entity to be created.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The created entity.
     */
    _create(endpoint, data, raw = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof data !== 'object' || Object.keys(data).length === 0) {
                throw (0, createError_1.default)('The "data" argument must be a not empty object', 500, data, 'ERR_INCORRECT_DATA_ARG');
            }
            const xmlBuilder = new this.xml2js.Builder({ rootName: this.singularName });
            const xml = xmlBuilder.buildObject(Object.assign({}, data));
            const params = {
                xml
            };
            const response = yield this.api
                .post(`/${endpoint}/json`, this.qs.stringify(params))
                .catch((err) => {
                var _a, _b;
                throw (0, createError_1.default)(`Error on create method during request call: ${err.message}`, ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || 400, ((_b = err.response) === null || _b === void 0 ? void 0 : _b.data) || null, err.code || 'ERR_POST_REQUEST_FAILURE');
            });
            const responseData = response.data;
            if (responseData.retorno.erros) {
                const errReturn = responseData.retorno;
                let errData;
                if (raw) {
                    errData = { retorno: errReturn };
                }
                else {
                    // maybe enhance it to include JSON API standards?
                    const rawErrData = errReturn.erros;
                    errData = rawErrData.map((err) => err.erro);
                }
                throw (0, createError_1.default)('Error on create method after request call', 400, errData, 'ERR_ENTITY_CREATION_FAILURE');
            }
            else {
                if (raw) {
                    return responseData;
                }
                else {
                    const rawResponse = responseData.retorno;
                    if (Array.isArray(rawResponse[this.pluralName])) {
                        const rawEntity = rawResponse[this.pluralName];
                        return rawEntity[0][this.singularName];
                    }
                    else {
                        const rawEntity = rawResponse[this.pluralName];
                        return rawEntity[this.singularName];
                    }
                }
            }
        });
    }
    /**
     * Update an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity code or id.
     * @param data The data for the entity to be updated.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @return The updated entity.
     */
    _update(endpoint, id, data, raw = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof data !== 'object' || Object.keys(data).length === 0) {
                throw (0, createError_1.default)('The "data" argument must be a not empty object', 500, data, 'ERR_INCORRECT_DATA_ARG');
            }
            if (!id || typeof id === 'object' || Array.isArray(id)) {
                throw (0, createError_1.default)('The "id" argument must be a number or string', 500, id, 'ERR_INCORRECT_DATA_ID');
            }
            const xmlBuilder = new this.xml2js.Builder();
            const xml = xmlBuilder.buildObject(Object.assign({}, data));
            const params = {
                apikey: __classPrivateFieldGet(this, _BaseEntity_apiKey, "f"),
                xml
            };
            const response = yield this.api
                .put(`/${endpoint}/${id}/json`, this.qs.stringify(params))
                .catch((err) => {
                var _a;
                const errResponse = err.response;
                throw (0, createError_1.default)(`Error on update method during request call: ${err.message}`, ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || 400, errResponse, err.code || 'ERR_UPDATE_REQUEST_FAILURE');
            });
            const responseData = response.data;
            if (responseData.retorno.erros) {
                const errReturn = responseData.retorno;
                let errData;
                if (raw) {
                    errData = { retorno: errReturn };
                }
                else {
                    // maybe enhance it to include JSON API standards?
                    const rawErrData = errReturn.erros;
                    errData = rawErrData.map((err) => err.erro);
                }
                throw (0, createError_1.default)('Error on update method after request call', 400, errData, 'ERR_ENTITY_UPDATING_FAILURE');
            }
            else {
                if (raw) {
                    return responseData;
                }
                else {
                    const rawResponse = responseData.retorno;
                    if (Array.isArray(rawResponse[this.pluralName])) {
                        const rawEntity = rawResponse[this.pluralName];
                        return rawEntity[0][this.singularName];
                    }
                    else {
                        const rawEntity = rawResponse[this.pluralName];
                        return rawEntity[this.singularName];
                    }
                }
            }
        });
    }
    /**
     * Delete an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity code or id.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The deleted entity.
     */
    _delete(endpoint, id, raw = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api
                .delete(`/${endpoint}/${id}/json`)
                .catch((err) => {
                var _a;
                const errResponse = err.response;
                throw (0, createError_1.default)(`Error on delete method during request call: ${err.message}`, ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || 400, errResponse, err.code || 'ERR_DELETE_REQUEST_FAILURE');
            });
            const data = response.data;
            if (data.retorno.erros) {
                const errReturn = data.retorno;
                let errData;
                if (raw) {
                    errData = { retorno: errReturn };
                }
                else {
                    // maybe enhance it to include JSON API standards?
                    const rawErrData = errReturn.erros;
                    errData = Object.keys(rawErrData).map((code) => ({
                        cod: code,
                        msg: rawErrData[code]
                    }));
                }
                throw (0, createError_1.default)('Error on delete method after request call', response.status, errData, 'ERR_ENTITY_DELETION_FAILURE');
            }
            else {
                if (raw) {
                    return data;
                }
                else {
                    const rawResponse = data.retorno;
                    const rawEntity = rawResponse[this.pluralName];
                    return rawEntity[0][this.singularName];
                }
            }
        });
    }
}
exports.default = BaseEntity;
_BaseEntity_apiKey = new WeakMap();
