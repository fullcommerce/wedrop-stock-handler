/// <reference types="node" />
import { AxiosInstance } from 'axios';
import * as qs from 'querystring';
import * as xml2js from 'xml2js';
export interface ISingularEntity<T> {
    [singular: string]: T;
}
export interface IPluralEntity<T> {
    [plural: string]: ISingularEntity<T>[] | ISingularEntity<T>;
}
export interface ISingularError {
    erro: {
        cod: string;
        msg: string;
    };
}
export interface IDeleteError {
    [code: string]: string;
}
export interface IPluralError {
    erros: ISingularError[] | IDeleteError;
}
export interface IPluralResponse<T> {
    retorno: IPluralEntity<T> | IPluralError;
}
export interface ISingularResponse<T> {
    retorno: ISingularEntity<T> | IPluralError;
}
export default class BaseEntity<IEntity, IFilters, IInfos, IEntityResponse> {
    #private;
    api: AxiosInstance;
    qs: typeof qs;
    xml2js: typeof xml2js;
    singularName: string;
    pluralName: string;
    constructor(api: AxiosInstance, apiKey: string);
    all(options?: {
        params?: IFilters;
        raw?: false;
    }): Promise<IEntityResponse[]>;
    all(options?: {
        params?: IFilters;
        raw: true;
    }): Promise<IPluralResponse<IEntityResponse>>;
    find(id: number | string, options?: {
        params?: IInfos;
        raw?: false;
    }): Promise<IEntityResponse | IEntityResponse[]>;
    find(id: number | string, options?: {
        params?: IInfos;
        raw: true;
    }): Promise<IPluralResponse<IEntityResponse>>;
    findBy(options: IFilters & IInfos, raw?: false): Promise<IEntityResponse[]>;
    findBy(options: IFilters & IInfos, raw: true): Promise<IPluralResponse<IEntityResponse>>;
    create(data: IEntity, raw?: false): Promise<IEntityResponse>;
    create(data: IEntity, raw: true): Promise<IPluralResponse<IEntityResponse>>;
    update(id: number | string, data: IEntity, raw?: false): Promise<IEntityResponse>;
    update(id: number | string, data: IEntity, raw: true): Promise<IPluralResponse<IEntityResponse>>;
    delete(id: number | string, raw?: false): Promise<IEntityResponse>;
    delete(id: number | string, raw: true): Promise<IPluralResponse<IEntityResponse>>;
    /**
     * Retrieve all entities from the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param params The query params for the request sent by the user.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns An array of entities.
     */
    protected _getAll(endpoint: string, rawParams?: IFilters, raw?: boolean): Promise<IEntityResponse[] | IPluralResponse<IEntityResponse>>;
    /**
     * Retrieve one entity from the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity id.
     * @param params The query params for the request sent by the user.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The found entity.
     */
    protected _find(endpoint: string, id: number | string, params?: IFilters | IInfos | (IFilters & IInfos) | undefined, raw?: boolean): Promise<IEntityResponse | IEntityResponse[] | IPluralResponse<IEntityResponse>>;
    /**
     * Create an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param data The data for the entity to be created.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The created entity.
     */
    protected _create(endpoint: string, data: IEntity, raw?: boolean): Promise<IEntityResponse | IPluralResponse<IEntityResponse>>;
    /**
     * Update an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity code or id.
     * @param data The data for the entity to be updated.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @return The updated entity.
     */
    protected _update(endpoint: string, id: number | string, data: IEntity, raw?: boolean): Promise<IEntityResponse | IPluralResponse<IEntityResponse>>;
    /**
     * Delete an entity on the given endpoint.
     * @protected
     * @access protected
     * @async
     * @param endpoint The entity request endpoint.
     * @param id The entity code or id.
     * @param raw Boolean value to return either raw data from Bling or beautified processed data.
     * @returns The deleted entity.
     */
    protected _delete(endpoint: string, id: number | string, raw?: boolean): Promise<IEntityResponse | IPluralResponse<IEntityResponse>>;
}
