"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const method_1 = __importDefault(require("../template/method"));
const createError_1 = __importDefault(require("../helpers/createError"));
const handleApiError_1 = __importDefault(require("../helpers/handleApiError"));
class Find extends method_1.default {
    delete(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id || typeof id === 'object' || Array.isArray(id)) {
                throw (0, createError_1.default)({
                    name: 'BlingDeleteError',
                    message: 'The "id" argument must be a number or string',
                    status: '500',
                    data: { id },
                    code: 'ERR_INCORRECT_DELETE_ID'
                });
            }
            const endpoint = this.endpoint || this.singularName;
            const raw = options && options.raw !== undefined ? options.raw : this.raw;
            const response = yield this.api
                .delete(`/${endpoint}/${id}/json`)
                .catch((err) => {
                var _a, _b;
                const errorData = {
                    name: 'BlingRequestError',
                    message: `Error on delete method during request call: ${err.message}`,
                    status: String((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || '400',
                    code: err.code || 'ERR_DELETE_REQUEST_FAILURE'
                };
                const rawData = (_b = err.response) === null || _b === void 0 ? void 0 : _b.data;
                return (0, handleApiError_1.default)({
                    rawData,
                    errorData,
                    raw
                });
            });
            const rawData = response.data;
            const responseData = rawData.retorno;
            if (responseData.erros) {
                const errorData = {
                    name: 'BlingRequestError',
                    message: 'Error on delete method after request call',
                    status: '400',
                    code: 'ERR_DELETE_METHOD_FAILURE'
                };
                return (0, handleApiError_1.default)({
                    rawData,
                    errorData,
                    raw
                });
            }
            else {
                if (raw) {
                    return rawData;
                }
                else {
                    const rawResponse = responseData;
                    const rawEntity = rawResponse[this.pluralName];
                    return rawEntity[0][this.singularName];
                }
            }
        });
    }
}
exports.default = Find;
