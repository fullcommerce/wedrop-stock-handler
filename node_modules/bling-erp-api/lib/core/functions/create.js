"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js_1 = __importDefault(require("xml2js"));
const method_1 = __importDefault(require("../template/method"));
const createError_1 = __importDefault(require("../helpers/createError"));
const handleApiError_1 = __importDefault(require("../helpers/handleApiError"));
const convertArraysToObj_1 = __importDefault(require("../helpers/convertArraysToObj"));
class Create extends method_1.default {
    create(data, options, ...restData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data || typeof data !== 'object' || Object.keys(data).length === 0) {
                throw (0, createError_1.default)({
                    name: 'BlingCreateError',
                    message: 'The "data" argument must be a not empty object',
                    status: '500',
                    data,
                    code: 'ERR_INCORRECT_CREATE_DATA'
                });
            }
            const xmlBuilder = new xml2js_1.default.Builder({ rootName: this.singularName });
            const xml = xmlBuilder.buildObject((0, convertArraysToObj_1.default)(data));
            const params = Object.assign({ xml }, restData);
            const endpoint = this.endpoint || this.singularName;
            const raw = options && options.raw !== undefined ? options.raw : this.raw;
            const response = yield this.api
                .post(`/${endpoint}/json`, params)
                .catch((err) => {
                var _a, _b, _c;
                const errorData = {
                    name: 'BlingRequestError',
                    message: `Error on create method during request call: ${err.message}`,
                    status: String((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) || '400',
                    code: err.code || 'ERR_POST_REQUEST_FAILURE'
                };
                const rawData = (_b = err.response) === null || _b === void 0 ? void 0 : _b.data;
                if (rawData === '') {
                    console.log((_c = err.response) === null || _c === void 0 ? void 0 : _c.data);
                    throw (0, createError_1.default)(Object.assign(Object.assign({}, errorData), { data: {
                            errors: [
                                {
                                    title: 'Empty return',
                                    detail: 'The request has gotten an empty return.'
                                }
                            ]
                        } }));
                }
                else {
                    return (0, handleApiError_1.default)({
                        rawData,
                        errorData,
                        raw
                    });
                }
            });
            const rawData = response.data;
            const responseData = rawData.retorno;
            if (responseData.erros) {
                /**
                 * It can return as (most of the cases)
                 *  {
                 *    retorno: {
                 *      erros: {
                 *        cod: string,
                 *        msg: string
                 *      }[]
                 *    }
                 *  }
                 *
                 * or (paymentMethod case)
                 *  {
                 *    retorno: {
                 *      [cod: string]: string
                 *    }[]
                 *  }
                 *
                 * or (also paymentMethod case)
                 * {
                 *   retorno: string[]
                 * }
                 *  */
                const errorData = {
                    name: 'BlingRequestError',
                    message: 'Error on create method after request call',
                    status: '400',
                    code: 'ERR_CREATE_METHOD_FAILURE'
                };
                return (0, handleApiError_1.default)({
                    rawData,
                    errorData,
                    raw
                });
            }
            else {
                if (raw) {
                    return rawData;
                }
                else {
                    const rawResponse = responseData;
                    if (Array.isArray(rawResponse[this.pluralName])) {
                        /**
                         * It can return as (most of the cases)
                         *  {
                         *    retorno: {
                         *      [pluralName]: {
                         *        [singularName]: IEntityResponse
                         *      }[]
                         *    }
                         *  }
                         *
                         * or (paymentMethod case)
                         *  {
                         *    retorno: {
                         *      [pluralName]: IEntityResponse[]
                         *    }
                         *  }
                         *  */
                        const rawEntity = rawResponse[this.pluralName];
                        if (Object.keys(rawEntity[0]).length === 1) {
                            const arrRawReturn = rawEntity;
                            return arrRawReturn.map((entity) => entity[this.singularName]);
                        }
                        else {
                            return rawEntity;
                        }
                    }
                    else {
                        const rawEntity = rawResponse[this.pluralName];
                        return [rawEntity[this.singularName]];
                    }
                }
            }
        });
    }
}
exports.default = Create;
