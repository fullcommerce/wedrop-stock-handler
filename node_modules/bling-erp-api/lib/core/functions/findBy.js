"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const all_1 = __importDefault(require("./all"));
const method_1 = __importDefault(require("../template/method"));
const createError_1 = __importDefault(require("../helpers/createError"));
class FindBy extends method_1.default {
    findBy(params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!params) {
                throw (0, createError_1.default)({
                    name: 'BlingFindByError',
                    message: 'No options passed to `.findBy()` method',
                    status: '500',
                    data: { params },
                    code: 'ERR_INCORRECT_FINDBY_OPTIONS'
                });
            }
            if (!params.filters) {
                throw (0, createError_1.default)({
                    name: 'BlingFindByError',
                    message: 'No filters passed to `.findBy()` method',
                    status: '500',
                    data: { params },
                    code: 'ERR_INCORRECT_FINDBY_OPTION_FILTERS'
                });
            }
            const raw = options && options.raw !== undefined ? options.raw : this.raw;
            const config = {
                api: this.api,
                raw,
                endpoint: this.endpoint,
                singularName: this.singularName,
                pluralName: this.pluralName
            };
            const allEntity = new all_1.default(config);
            // @TODO: deal with interfaces problems to reuse code properly
            if (raw) {
                return yield allEntity.all({
                    params,
                    raw: true,
                    page: options && options.page
                });
            }
            else {
                return yield allEntity.all({
                    params,
                    page: options && options.page
                });
            }
        });
    }
}
exports.default = FindBy;
