import { IApiInstance } from '../core/interfaces/method';
export interface ICategory {
    descricao: string;
    idCategoriaPai?: number;
}
export declare type ICategoryFilters = Record<string, never>;
export declare type ICategoryInfos = Record<string, never>;
export interface ICategoryResponse {
    id: number;
    descricao: string;
    idCategoriaPai: number;
}
export default function Categories(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: ICategoryFilters | undefined;
                infos?: ICategoryInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<ICategoryResponse[]>;
        (options?: {
            params?: {
                filters?: ICategoryFilters | undefined;
                infos?: ICategoryInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICategoryResponse>>;
    };
    find: {
        (id: string | number, options?: {
            params?: ICategoryInfos | undefined;
            raw?: false | undefined;
        } | undefined): Promise<ICategoryResponse | ICategoryResponse[]>;
        (id: string | number, options?: {
            params?: ICategoryInfos | undefined;
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICategoryResponse>>;
    };
    findBy: {
        (params: {
            filters: ICategoryFilters;
            infos?: ICategoryInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<ICategoryResponse[]>;
        (params: {
            filters: ICategoryFilters;
            infos?: ICategoryInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICategoryResponse>>;
    };
    create: {
        (data: ICategory, options?: {
            raw?: false | undefined;
        } | undefined, ...restData: unknown[]): Promise<ICategoryResponse[]>;
        (data: ICategory, options?: {
            raw: true;
        } | undefined, ...restData: unknown[]): Promise<import("../core/interfaces/method").IPluralResponse<ICategoryResponse>>;
    };
    update: {
        (id: string | number, data: ICategory, options?: {
            raw?: false | undefined;
        } | undefined): Promise<ICategoryResponse>;
        (id: string | number, data: ICategory, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICategoryResponse>>;
    };
};
