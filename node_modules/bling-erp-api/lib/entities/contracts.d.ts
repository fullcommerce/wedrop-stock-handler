import { IApiInstance } from '../core/interfaces/method';
declare type IContractSituacao = 'A' | 'I' | 'B' | 'S' | 'T';
export interface IContract {
    dataCriacao?: string;
    dataBase?: string;
    contatoDiferenteCobranca?: number;
    numeroContrato?: string;
    descricao?: string;
    situacao: IContractSituacao;
    valor: number;
    emiteNota: 'S' | 'N';
    periodicidadeCobranca?: string;
    opcoesNota?: {
        percentualISS?: number;
        descISSTotalNota: 'S' | 'N';
        descIRTotalNota?: 'S' | 'N';
        codListaServico?: string;
        idProdutoVinculado?: string;
        mesNota?: string;
        textoNota?: string;
        naturezaOperacao?: string;
        cfop?: string;
    };
    idCategoria?: number;
    idPortador?: number;
    idVendedor?: number;
    desconto?: number;
    mesFimDesconto?: string;
    anoFimDesconto?: string;
    mesTermino?: string;
    anoTermino?: string;
    mesVencimento?: string;
    nroParcelasVendedor?: number;
    percentualVendedor?: number;
    emiteOS?: 'S' | 'N';
    obs?: string;
    cliente: {
        nome?: string;
        cnpj_cpf: string;
        tipo: 'F' | 'J';
        ie_rg?: string;
        rg?: string;
        endereco?: string;
        numero?: string;
        complemento?: string;
        cidade?: string;
        bairro?: string;
        cep?: string;
        uf?: string;
        email?: string;
        fone?: string;
        celular?: string;
    };
    contato?: {
        nome?: string;
        cnpj_cpf: string;
        tipoPessoa?: 'F' | 'J';
        ie_rg?: string;
        rg?: string;
        endereco?: string;
        numero?: string;
        complemento?: string;
        cidade?: string;
        bairro?: string;
        cep?: string;
        uf?: string;
        email?: string;
        fone?: string;
        celular?: string;
    };
    anexos: {
        anexo: {
            filename: string;
            data: string;
        };
    }[];
    diaVencimento?: string;
}
export interface IContractFilters {
    dataCriacao?: string;
    dataBase?: string;
    situacao?: IContractSituacao;
    idContato?: number;
    idCliente?: number;
}
export declare type IContractInfos = Record<string, never>;
export interface IContractCreateResponse {
    id: string;
    numeroContrato: string;
}
export interface IContractDeleteResponse {
    id: string;
    mensagem: string;
}
export interface IContractResponse {
    id: string;
    nome: string;
    descricao: string;
    contatoDiferenteCobranca: string;
    numeroContrato: string;
    idCliente: string;
    idContato: string;
    situacao: IContractSituacao;
    dataCriacao: string;
    valor: string;
    dataBase: string;
    mesVencimento: string;
    diaVencimento: string;
    periodicidadeCobranca: string;
    emiteNota: 'S' | 'N';
    tipoManutencao: string;
    idCategoria: string;
    idPortador: string;
    idFormaPagamento?: string;
    desconto: string;
    mesFimDesconto: string;
    anoFimDesconto: string;
    mesTermino: string;
    anoTermino: string;
    idVendedor: string;
    nroParcelasVendedor: string;
    percentualVendedor: string;
    emiteOS: 'S' | 'N';
    obs: string;
    dataUltimoPagamento?: string;
    opcoesNota: {
        percentualISS: string;
        descontarISS?: string;
        descISSTotalNota: 'S' | 'N';
        descIRTotalNota: 'S' | 'N';
        codListaServico: string;
        idProdutoVinculado: string;
        mesNota: string;
        textoNota: string;
        naturezaOperacao: string;
        cfop?: string;
    };
    nroContasEmAtraso: string;
    anexos: {
        nome: string;
        link: string;
    }[];
}
export default function Contracts(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: IContractFilters | undefined;
                infos?: IContractInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IContractResponse[]>;
        (options?: {
            params?: {
                filters?: IContractFilters | undefined;
                infos?: IContractInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IContractResponse>>;
    };
    find: {
        (id: string | number, options?: {
            params?: IContractInfos | undefined;
            raw?: false | undefined;
        } | undefined): Promise<IContractResponse | IContractResponse[]>;
        (id: string | number, options?: {
            params?: IContractInfos | undefined;
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IContractResponse>>;
    };
    findBy: {
        (params: {
            filters: IContractFilters;
            infos?: IContractInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IContractResponse[]>;
        (params: {
            filters: IContractFilters;
            infos?: IContractInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IContractResponse>>;
    };
    create: {
        (data: IContract, options?: {
            raw?: false | undefined;
        } | undefined, ...restData: unknown[]): Promise<IContractCreateResponse[]>;
        (data: IContract, options?: {
            raw: true;
        } | undefined, ...restData: unknown[]): Promise<import("../core/interfaces/method").IPluralResponse<IContractCreateResponse>>;
    };
    update: {
        (id: string | number, data: IContract, options?: {
            raw?: false | undefined;
        } | undefined): Promise<IContractResponse>;
        (id: string | number, data: IContract, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IContractResponse>>;
    };
    delete: {
        (id: string | number, options?: {
            raw?: false | undefined;
        } | undefined): Promise<IContractDeleteResponse>;
        (id: string | number, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IContractDeleteResponse>>;
    };
};
export {};
