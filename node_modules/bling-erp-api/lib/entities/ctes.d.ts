import { IApiInstance } from '../core/interfaces/method';
export interface ICte {
    pedido: {
        xml: string;
    };
}
export interface ICteFilters {
    dataEmissao?: string;
}
export declare type ICteInfos = Record<string, never>;
export interface ICteDeleteResponse {
    id: string;
    mensagem: string;
}
export interface ICteResponse {
    id: string;
    serie: string;
    numero: string;
    natureza: string;
    cfop: string;
    dataEmissao: string;
    situacao: string;
    tipoCte: string;
    tipoServico: string;
    modal: string;
    municipioInicio: string;
    UFInicio: string;
    municipioFim: string;
    UFFim: string;
    cst: string;
    baseCalculo: string;
    aliquotaIcms: string;
    valorIcms: string;
    valorPis: string;
    valorCofins: string;
    valorIr: string;
    valorInss: string;
    valorCsll: string;
    valorTotal: string;
    rntrc: string;
    emissor: {
        nome: string;
        cnpj: string;
        ie: string;
        endereco: string;
        numero: string;
        complemento?: string;
        bairro: string;
        cep: string;
        municipio: string;
        uf: string;
        fone: string;
    };
    remetente: {
        nome: string;
        cnpj: string;
        ie: string;
        endereco: string;
        numero: string;
        complemento?: string;
        bairro: string;
        cep: string;
        municipio: string;
        uf: string;
        fone?: string;
        email?: string;
    };
    destinatario: {
        nome: string;
        cnpj: string;
        ie: string;
        endereco: string;
        numero: string;
        complemento: string;
        bairro: string;
        cep: string;
        municipio: string;
        uf: string;
        fone?: string;
        email?: string;
    };
    autorizacao: {
        chave: string;
        dataRecebimento: string;
        numeroProtocolo: string;
    };
    nota: {
        chave: string;
    };
}
export default function Ctes(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: ICteFilters | undefined;
                infos?: ICteInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<ICteResponse[]>;
        (options?: {
            params?: {
                filters?: ICteFilters | undefined;
                infos?: ICteInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICteResponse>>;
    };
    find: (numero: number | string, serie: number | string, options?: {
        params?: ICteInfos | undefined;
        raw?: boolean | undefined;
    } | undefined) => Promise<ICteResponse | import("../core/interfaces/method").IPluralResponse<ICteResponse> | ICteResponse[]>;
    findBy: {
        (params: {
            filters: ICteFilters;
            infos?: ICteInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<ICteResponse[]>;
        (params: {
            filters: ICteFilters;
            infos?: ICteInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICteResponse>>;
    };
    create: (data: ICte, options?: {
        loja?: string | number | undefined;
        raw?: boolean | undefined;
    } | undefined) => Promise<import("../core/interfaces/method").IPluralResponse<ICteResponse> | ICteResponse[]>;
    post: (id: number | string, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<import("../core/interfaces/method").IPluralResponse<ICteResponse> | ICteResponse[]>;
    update: {
        (id: string | number, data: ICte, options?: {
            raw?: false | undefined;
        } | undefined): Promise<ICteResponse>;
        (id: string | number, data: ICte, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<ICteResponse>>;
    };
    delete: (id: number | string, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<ICteDeleteResponse | import("../core/interfaces/method").IPluralResponse<ICteDeleteResponse>>;
};
