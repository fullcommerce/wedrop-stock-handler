import { IApiInstance } from '../core/interfaces/method';
import IUFs from './types/uf';
declare type ISituacaoNumber = '0' | '1' | '2' | '3';
declare type ISituacaoName = 'Todas' | 'Pendente' | 'Emitida' | 'Cancelada';
export interface IServiceInvoice {
    data?: Date;
    vendedor?: string;
    numero_rps?: string;
    reter_iss?: 'S' | 'N';
    desconto?: number;
    cliente: {
        nome: string;
        cnpj: string;
        ie?: string;
        im?: string;
        endereco: string;
        numero: string;
        complemento?: string;
        bairro: string;
        cep: string;
        cidade: string;
        uf: IUFs;
        fone?: string;
        email: string;
    };
    servicos: {
        servico: {
            descricao: string;
            valor: number;
            codigo: string;
        };
    };
    parcelas?: {
        parcela: {
            dias?: number;
            data?: Date;
            vlr: number;
            obs?: string;
            forma?: string;
        };
    }[];
}
export interface IServiceInvoiceFilters {
    dataEmissao?: string;
    situacao?: ISituacaoNumber;
}
export declare type IServiceInvoiceInfos = Record<string, never>;
export interface IServiceInvoiceCreateResponse {
    numero: string;
}
export interface IServiceInvoiceSendResponse {
    serie: string;
    numero: string;
    numeronfse: string;
    situacao: ISituacaoName;
    cliente: {
        name: string;
        cnpj: string;
        email: string;
    };
    dataEmissao: string;
    valorNota: number;
    linkNFSe: string;
    codigoVerificacao: string;
}
export interface IServiceInvoiceResponse {
    serie: string;
    numero: string;
    numeroNFSe?: string;
    situacao: ISituacaoName;
    contato: string;
    dataEmissao: string;
    valorNota: number;
    linkNFSe: string;
    codigoVerificacao: string;
}
export default function ServiceInvoices(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: IServiceInvoiceFilters | undefined;
                infos?: IServiceInvoiceInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IServiceInvoiceResponse[]>;
        (options?: {
            params?: {
                filters?: IServiceInvoiceFilters | undefined;
                infos?: IServiceInvoiceInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IServiceInvoiceResponse>>;
    };
    find: {
        (id: string | number, options?: {
            params?: IServiceInvoiceInfos | undefined;
            raw?: false | undefined;
        } | undefined): Promise<IServiceInvoiceResponse | IServiceInvoiceResponse[]>;
        (id: string | number, options?: {
            params?: IServiceInvoiceInfos | undefined;
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IServiceInvoiceResponse>>;
    };
    findBy: {
        (params: {
            filters: IServiceInvoiceFilters;
            infos?: IServiceInvoiceInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IServiceInvoiceResponse[]>;
        (params: {
            filters: IServiceInvoiceFilters;
            infos?: IServiceInvoiceInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IServiceInvoiceResponse>>;
    };
    create: {
        (data: IServiceInvoice, options?: {
            raw?: false | undefined;
        } | undefined, ...restData: unknown[]): Promise<IServiceInvoiceCreateResponse[]>;
        (data: IServiceInvoice, options?: {
            raw: true;
        } | undefined, ...restData: unknown[]): Promise<import("../core/interfaces/method").IPluralResponse<IServiceInvoiceCreateResponse>>;
    };
    send: (numero: number | string, serie: number | string, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<import("../core/interfaces/method").IPluralResponse<IServiceInvoiceSendResponse> | IServiceInvoiceSendResponse[]>;
};
export {};
