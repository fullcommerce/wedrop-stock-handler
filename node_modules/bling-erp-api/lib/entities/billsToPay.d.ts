import { IApiInstance } from '../core/interfaces/method';
export interface IBillToPay {
    dataEmissao?: string;
    vencimentoOriginal?: string;
    competencia?: string;
    nroDocumento?: string;
    valor: number;
    historico?: string;
    categoria?: string;
    portador?: string;
    idFormaPagamento?: string;
    ocorrencia: {
        ocorrenciaTipo: 'U' | 'P' | 'M' | 'T' | 'S' | 'A' | 'E';
        diaVencimento?: number;
        nroParcelas?: number;
        diaSemanaVencimento?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    fornecedor: {
        nome?: string;
        id?: string;
        cpf_cnpj?: string;
        tipoPessoa?: 'F' | 'J';
        ie_rg?: string;
        endereco?: string;
        numero?: string;
        complemento?: string;
        cidade?: string;
        bairro?: string;
        cep?: string;
        uf?: string;
        email?: string;
        fone?: string;
        celular?: string;
    };
}
export interface IBillToPayUpdateContent {
    dataLiquidacao: string;
    juros?: number;
    desconto?: number;
    acrescimo?: number;
    tarifa?: number;
}
export interface IBillToPayFilters {
    dataEmissao?: string;
    dataVencimento?: string;
    situacao?: 'pago' | 'cancelada' | 'aberto' | 'parcial';
    cnpj?: string;
}
export declare type IBillToPayInfos = Record<string, never>;
export interface IBillToPayCreateResponse {
    id: number;
    nroDocumento: string;
    vencimento: number;
}
export interface IBillToPayResponse {
    id: string;
    situacao: 'pago' | 'cancelada' | 'aberto' | 'parcial';
    dataEmissao: string;
    vencimentoOriginal: string;
    vencimento: string;
    competencia: string;
    nroDocumento?: string;
    valor: string;
    saldo: string;
    historico?: string;
    categoria?: string;
    portador?: string;
    pagamento: {
        totalPago: number;
        totalJuro: number;
        totalDesconto: number;
        totalAcrescimo: number;
        totalTarifa: number;
        data: string;
        borderos: {
            bordero: {
                id: string;
                conta: string;
                dataPagamento: string;
                valorPago: string;
                valorJuro: string;
                valorDesconto: string;
                valorAcrescimo: string;
                valorTarifa: string;
            };
        }[];
    } | [];
    ocorrencia: 'Ãšnica' | 'Parcela' | 'Mensal' | 'Trimestral' | 'Semestral' | 'Anual' | 'Semanal';
    fornecedor: {
        idContato: string;
        nome: string;
        tipoPessoa: 'F' | 'J';
        cpf?: string;
        cnpj?: string;
        rg?: string;
        endereco?: string;
        numero?: string;
        complemento?: string;
        cidade?: string;
        bairro?: string;
        cep?: string;
        uf?: string;
        email?: string;
    };
}
export default function BillsToPay(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: IBillToPayFilters | undefined;
                infos?: IBillToPayInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IBillToPayResponse[]>;
        (options?: {
            params?: {
                filters?: IBillToPayFilters | undefined;
                infos?: IBillToPayInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IBillToPayResponse>>;
    };
    find: {
        (id: string | number, options?: {
            params?: IBillToPayInfos | undefined;
            raw?: false | undefined;
        } | undefined): Promise<IBillToPayResponse | IBillToPayResponse[]>;
        (id: string | number, options?: {
            params?: IBillToPayInfos | undefined;
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IBillToPayResponse>>;
    };
    findBy: {
        (params: {
            filters: IBillToPayFilters;
            infos?: IBillToPayInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IBillToPayResponse[]>;
        (params: {
            filters: IBillToPayFilters;
            infos?: IBillToPayInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IBillToPayResponse>>;
    };
    create: {
        (data: IBillToPay, options?: {
            raw?: false | undefined;
        } | undefined, ...restData: unknown[]): Promise<IBillToPayCreateResponse[]>;
        (data: IBillToPay, options?: {
            raw: true;
        } | undefined, ...restData: unknown[]): Promise<import("../core/interfaces/method").IPluralResponse<IBillToPayCreateResponse>>;
    };
    update: {
        (id: string | number, data: IBillToPayUpdateContent, options?: {
            raw?: false | undefined;
        } | undefined): Promise<IBillToPayResponse>;
        (id: string | number, data: IBillToPayUpdateContent, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IBillToPayResponse>>;
    };
};
