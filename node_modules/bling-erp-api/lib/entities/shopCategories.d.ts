import { IApiInstance } from '../core/interfaces/method';
export interface IShopCategory {
    idCategoria: number;
    idVinculoLoja: number;
    descricaoVinculo: string;
}
export declare type IShopCategoryFilters = Record<string, never>;
export declare type IShopCategoryInfos = Record<string, never>;
export interface IShopCategoryResponse {
    idCategoria: number;
    idVinculoLoja: string;
    descricaoVinculo: string;
}
export default function ShopCategories(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: (idLoja: number | string, options?: {
        raw?: boolean | undefined;
        page?: number | undefined;
    } | undefined) => Promise<import("../core/interfaces/method").IPluralResponse<IShopCategoryResponse> | IShopCategoryResponse[] | undefined>;
    find: (idLoja: number | string, idCategoria: number | string, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<IShopCategoryResponse | import("../core/interfaces/method").IPluralResponse<IShopCategoryResponse> | IShopCategoryResponse[]>;
    create: (idLoja: number | string, data: IShopCategory, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<import("../core/interfaces/method").IPluralResponse<IShopCategoryResponse> | IShopCategoryResponse[]>;
    update: (idLoja: number | string, idCategoria: number | string, data: IShopCategory, options?: {
        raw?: boolean | undefined;
    } | undefined) => Promise<IShopCategoryResponse | import("../core/interfaces/method").IPluralResponse<IShopCategoryResponse>>;
};
