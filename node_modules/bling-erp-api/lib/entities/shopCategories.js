"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const all_1 = __importDefault(require("../core/functions/all"));
const find_1 = __importDefault(require("../core/functions/find"));
const create_1 = __importDefault(require("../core/functions/create"));
const update_1 = __importDefault(require("../core/functions/update"));
function ShopCategories(api, raw) {
    const config = {
        api,
        raw,
        singularName: 'categoriaLoja',
        pluralName: 'categoriasLoja'
    };
    const all = (idLoja, options) => __awaiter(this, void 0, void 0, function* () {
        const allMethod = new all_1.default(Object.assign(Object.assign({}, config), { endpoint: `categoriasLoja/${idLoja}` }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        if (options) {
            if (raw && options.page) {
                return yield allMethod.all({ raw: true, page: options.page });
            }
            if (raw) {
                return yield allMethod.all({ raw: true });
            }
            if (options.page) {
                return yield allMethod.all({ page: options.page });
            }
        }
        else {
            return yield allMethod.all({ raw: false });
        }
    });
    const find = (idLoja, idCategoria, options) => __awaiter(this, void 0, void 0, function* () {
        const findMethod = new find_1.default(Object.assign(Object.assign({}, config), { endpoint: `categoriasLoja/${idLoja}` }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        if (raw) {
            return yield findMethod.find(idCategoria, { raw: true });
        }
        else {
            return yield findMethod.find(idCategoria, { raw: false });
        }
    });
    const create = (idLoja, data, options) => __awaiter(this, void 0, void 0, function* () {
        const createMethod = new create_1.default(Object.assign(Object.assign({}, config), { endpoint: `categoriasLoja/${idLoja}` }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        if (raw) {
            return yield createMethod.create(data, { raw: true });
        }
        else {
            return yield createMethod.create(data, { raw: false });
        }
    });
    const update = (idLoja, idCategoria, data, options) => __awaiter(this, void 0, void 0, function* () {
        const updateMethod = new update_1.default(Object.assign(Object.assign({}, config), { endpoint: `categoriasLoja/${idLoja}` }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        if (raw) {
            return yield updateMethod.update(idCategoria, data, { raw: true });
        }
        else {
            return yield updateMethod.update(idCategoria, data, { raw: false });
        }
    });
    return Object.assign(config, {
        all,
        find,
        create,
        update
    });
}
exports.default = ShopCategories;
