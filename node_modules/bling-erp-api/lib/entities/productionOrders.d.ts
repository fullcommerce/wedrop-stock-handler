import { IApiInstance } from '../core/interfaces/method';
export interface IProductionOrder {
    itens: {
        item: {
            codigoProduto?: string;
            nomeProduto: string;
            quantidade: number;
        };
    }[];
    idDepositoOrigem: number;
    idDepositoDestino: number;
    numero?: number;
    previsaoInicio?: string;
    previsaoFinal?: string;
    observacoes?: string;
}
export declare type IProductionOrderInfos = Record<string, never>;
export declare type IProductionOrderFilters = Record<string, never>;
export interface IProductionOrderResponse {
    itens: {
        item: {
            codigoProduto?: string;
            nomeProduto: string;
            quantidade: number;
        };
    }[];
    idDepositoOrigem: number;
    idDepositoDestino: number;
    numero?: number;
    cliente: [];
    responsavel?: string;
    situacao: string;
    idSituacao: string;
    previsaoInicio?: string;
    previsaoFinal?: string;
    dataInicio?: string;
    dataFim?: string;
    dataCriacao?: string;
    dataAlteracao?: string;
    observacoes?: string;
}
export interface IProductionOrderCreateResponse {
    id: number;
    numero: number;
}
export interface IProductionOrderDeleteResponse {
    id: number;
    numero: number;
    msg: string;
}
export default function ProductionOrders(api: IApiInstance, raw: boolean): {
    api: import("axios").AxiosInstance;
    raw: boolean;
    singularName: string;
    pluralName: string;
} & {
    all: {
        (options?: {
            params?: {
                filters?: IProductionOrderFilters | undefined;
                infos?: IProductionOrderInfos | undefined;
            } | undefined;
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IProductionOrderResponse[]>;
        (options?: {
            params?: {
                filters?: IProductionOrderFilters | undefined;
                infos?: IProductionOrderInfos | undefined;
            } | undefined;
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IProductionOrderResponse>>;
    };
    find: {
        (id: string | number, options?: {
            params?: IProductionOrderInfos | undefined;
            raw?: false | undefined;
        } | undefined): Promise<IProductionOrderResponse | IProductionOrderResponse[]>;
        (id: string | number, options?: {
            params?: IProductionOrderInfos | undefined;
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IProductionOrderResponse>>;
    };
    findBy: {
        (params: {
            filters: IProductionOrderFilters;
            infos?: IProductionOrderInfos | undefined;
        }, options?: {
            raw?: false | undefined;
            page?: number | undefined;
        } | undefined): Promise<IProductionOrderResponse[]>;
        (params: {
            filters: IProductionOrderFilters;
            infos?: IProductionOrderInfos | undefined;
        }, options?: {
            raw: true;
            page?: number | undefined;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IProductionOrderResponse>>;
    };
    create: {
        (data: IProductionOrder, options?: {
            raw?: false | undefined;
        } | undefined, ...restData: unknown[]): Promise<IProductionOrderCreateResponse[]>;
        (data: IProductionOrder, options?: {
            raw: true;
        } | undefined, ...restData: unknown[]): Promise<import("../core/interfaces/method").IPluralResponse<IProductionOrderCreateResponse>>;
    };
    delete: {
        (id: string | number, options?: {
            raw?: false | undefined;
        } | undefined): Promise<IProductionOrderDeleteResponse>;
        (id: string | number, options?: {
            raw: true;
        } | undefined): Promise<import("../core/interfaces/method").IPluralResponse<IProductionOrderDeleteResponse>>;
    };
};
