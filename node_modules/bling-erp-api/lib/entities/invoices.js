"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const all_1 = __importDefault(require("../core/functions/all"));
const find_1 = __importDefault(require("../core/functions/find"));
const findBy_1 = __importDefault(require("../core/functions/findBy"));
const create_1 = __importDefault(require("../core/functions/create"));
function Invoices(api, raw) {
    const config = {
        api,
        raw,
        singularName: 'notafiscal',
        pluralName: 'notasfiscais'
    };
    const find = (numero, serie, options) => __awaiter(this, void 0, void 0, function* () {
        const findMethod = new find_1.default(config);
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        // @TODO: see how to reuse the code below
        if (raw) {
            return yield findMethod.find(`${numero}/${serie}`, { raw: true });
        }
        else {
            return yield findMethod.find(`${numero}/${serie}`, { raw: false });
        }
    });
    const send = (numero, serie, options) => __awaiter(this, void 0, void 0, function* () {
        const createMethod = new create_1.default(Object.assign(Object.assign({}, config), { endpoint: `${config.singularName}/${numero}/${serie}` }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        // @TODO: see how to reuse the code below
        if (options) {
            if (raw) {
                return yield createMethod.create({}, { raw: true }, {
                    sendEmail: options.sendEmail
                });
            }
            else {
                return yield createMethod.create({}, { raw: false }, {
                    sendEmail: options.sendEmail
                });
            }
        }
        else {
            return yield createMethod.create({});
        }
    });
    const create = (data, options) => __awaiter(this, void 0, void 0, function* () {
        const createMethod = new create_1.default(Object.assign(Object.assign({}, config), { endpoint: 'notafiscal', singularName: 'notaFiscal' }));
        const raw = options && options.raw !== undefined ? options.raw : config.raw;
        // @TODO: see how to reuse the code below
        if (raw) {
            return yield createMethod.create(data, { raw: true });
        }
        else {
            return yield createMethod.create(data, { raw: false });
        }
    });
    return Object.assign(config, {
        all: new all_1.default().all,
        find,
        send,
        findBy: new findBy_1.default()
            .findBy,
        create
    });
}
exports.default = Invoices;
