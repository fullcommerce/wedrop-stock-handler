import { IPluralResponse } from './core';
export interface IAll<IEntityResponse, IFilters> {
    (options?: {
        params?: IFilters;
        raw?: boolean;
    }): Promise<IPluralResponse<IEntityResponse> | IEntityResponse[]>;
}
export interface IFind<IEntityResponse, IInfos> {
    (id: string | number, options?: {
        params?: IInfos;
        raw?: boolean;
    }): Promise<IPluralResponse<IEntityResponse> | IEntityResponse[] | IEntityResponse>;
}
export interface IFindBy<IEntityResponse, IQuery> {
    (options: {
        params: IQuery;
        raw?: boolean;
    }): Promise<IPluralResponse<IEntityResponse> | IEntityResponse[]>;
}
export interface ICreate<IEntity, IEntityResponse> {
    (data: IEntity, raw?: boolean): Promise<IPluralResponse<IEntityResponse> | IEntityResponse>;
}
export interface IUpdate<IEntity, IEntityResponse> {
    (id: number | string, data: IEntity, raw?: boolean): Promise<IPluralResponse<IEntityResponse> | IEntityResponse>;
}
export interface IDelete<IEntityResponse> {
    (id: number | string, raw?: boolean): Promise<IPluralResponse<IEntityResponse> | IEntityResponse>;
}
