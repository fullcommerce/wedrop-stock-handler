import Borderos from './entities/borderos';
import CustomizedField from './entities/customizedFields';
import Categories from './entities/categories';
import CommercialProposals from './entities/commercialProposals';
import Contacts from './entities/contacts';
import Deposits from './entities/deposits';
import Products from './entities/products';
import Orders from './entities/orders';
import PurchaseOrders from './entities/purchaseOrders';
import Invoices from './entities/invoices';
import ShopCategories from './entities/shopCategories';
import BillsToPay from './entities/billsToPay';
import BillsToReceive from './entities/billsToReceive';
import Contracts from './entities/contracts';
import Ctes from './entities/ctes';
import PaymentMethods from './entities/paymentMethods';
import ProductGroups from './entities/productGroups';
import Nfces from './entities/nfces';
import ServiceInvoices from './entities/serviceInvoices';
import { IBlingError as IStandardBlingError } from './core/helpers/createError';
export declare type IBorderos = ReturnType<typeof Borderos>;
export declare type ICustomizedFields = ReturnType<typeof CustomizedField>;
export declare type ICategories = ReturnType<typeof Categories>;
export declare type ICommercialProposals = ReturnType<typeof CommercialProposals>;
export declare type IContacts = ReturnType<typeof Contacts>;
export declare type IDeposits = ReturnType<typeof Deposits>;
export declare type IProducts = ReturnType<typeof Products>;
export declare type IOrders = ReturnType<typeof Orders>;
export declare type IPurchaseOrders = ReturnType<typeof PurchaseOrders>;
export declare type IInvoices = ReturnType<typeof Invoices>;
export declare type IShopCategories = ReturnType<typeof ShopCategories>;
export declare type IBillsToPay = ReturnType<typeof BillsToPay>;
export declare type IBillsToReceive = ReturnType<typeof BillsToReceive>;
export declare type IContracts = ReturnType<typeof Contracts>;
export declare type ICtes = ReturnType<typeof Ctes>;
export declare type IPaymentMethods = ReturnType<typeof PaymentMethods>;
export declare type IProductGroups = ReturnType<typeof ProductGroups>;
export declare type INfces = ReturnType<typeof Nfces>;
export declare type IServiceInvoices = ReturnType<typeof ServiceInvoices>;
export declare type IBlingError = IStandardBlingError;
export declare class Bling {
    #private;
    constructor(apiKey: string, options?: {
        raw: boolean;
    });
    static create(apiKey: string, options?: {
        raw: boolean;
    }): Bling;
    borderos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/borderos").IBorderoResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/borderos").IBorderoResponse>>;
        };
    };
    customizedFields(): Promise<{
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        find: (id: "Produtos" | "OrdemServico" | "Contatos", options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/customizedFields").ICustomizedFieldResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/customizedFields").ICustomizedFieldResponse> | import("./entities/customizedFields").ICustomizedFieldResponse[]>;
    }>;
    camposCustomizados(): Promise<{
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        find: (id: "Produtos" | "OrdemServico" | "Contatos", options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/customizedFields").ICustomizedFieldResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/customizedFields").ICustomizedFieldResponse> | import("./entities/customizedFields").ICustomizedFieldResponse[]>;
    }>;
    categories(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/categories").ICategoryFilters | undefined;
                    infos?: import("./entities/categories").ICategoryInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/categories").ICategoryFilters | undefined;
                    infos?: import("./entities/categories").ICategoryInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/categories").ICategoryInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse | import("./entities/categories").ICategoryResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/categories").ICategoryInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/categories").ICategoryFilters;
                infos?: import("./entities/categories").ICategoryInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse[]>;
            (params: {
                filters: import("./entities/categories").ICategoryFilters;
                infos?: import("./entities/categories").ICategoryInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        create: {
            (data: import("./entities/categories").ICategory, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/categories").ICategoryResponse[]>;
            (data: import("./entities/categories").ICategory, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/categories").ICategory, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse>;
            (id: string | number, data: import("./entities/categories").ICategory, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
    };
    categorias(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/categories").ICategoryFilters | undefined;
                    infos?: import("./entities/categories").ICategoryInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/categories").ICategoryFilters | undefined;
                    infos?: import("./entities/categories").ICategoryInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/categories").ICategoryInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse | import("./entities/categories").ICategoryResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/categories").ICategoryInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/categories").ICategoryFilters;
                infos?: import("./entities/categories").ICategoryInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse[]>;
            (params: {
                filters: import("./entities/categories").ICategoryFilters;
                infos?: import("./entities/categories").ICategoryInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        create: {
            (data: import("./entities/categories").ICategory, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/categories").ICategoryResponse[]>;
            (data: import("./entities/categories").ICategory, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/categories").ICategory, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/categories").ICategoryResponse>;
            (id: string | number, data: import("./entities/categories").ICategory, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/categories").ICategoryResponse>>;
        };
    };
    shopCategories(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: (idLoja: string | number, options?: {
            raw?: boolean | undefined;
            page?: number | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[] | undefined>;
        find: (idLoja: string | number, idCategoria: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/shopCategories").IShopCategoryResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[]>;
        create: (idLoja: string | number, data: import("./entities/shopCategories").IShopCategory, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[]>;
        update: (idLoja: string | number, idCategoria: string | number, data: import("./entities/shopCategories").IShopCategory, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/shopCategories").IShopCategoryResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse>>;
    };
    categoriasLoja(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: (idLoja: string | number, options?: {
            raw?: boolean | undefined;
            page?: number | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[] | undefined>;
        find: (idLoja: string | number, idCategoria: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/shopCategories").IShopCategoryResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[]>;
        create: (idLoja: string | number, data: import("./entities/shopCategories").IShopCategory, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse> | import("./entities/shopCategories").IShopCategoryResponse[]>;
        update: (idLoja: string | number, idCategoria: string | number, data: import("./entities/shopCategories").IShopCategory, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/shopCategories").IShopCategoryResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/shopCategories").IShopCategoryResponse>>;
    };
    contacts(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/contacts").IContactFilters | undefined;
                    infos?: import("./entities/contacts").IContactInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/contacts").IContactFilters | undefined;
                    infos?: import("./entities/contacts").IContactInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/contacts").IContactInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse | import("./entities/contacts").IContactResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/contacts").IContactInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/contacts").IContactFilters;
                infos?: import("./entities/contacts").IContactInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse[]>;
            (params: {
                filters: import("./entities/contacts").IContactFilters;
                infos?: import("./entities/contacts").IContactInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        create: {
            (data: import("./entities/contacts").IContact, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/contacts").IContactCreateResponse[]>;
            (data: import("./entities/contacts").IContact, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/contacts").IContact, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactUpdateResponse>;
            (id: string | number, data: import("./entities/contacts").IContact, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactUpdateResponse>>;
        };
    };
    contatos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/contacts").IContactFilters | undefined;
                    infos?: import("./entities/contacts").IContactInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/contacts").IContactFilters | undefined;
                    infos?: import("./entities/contacts").IContactInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/contacts").IContactInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse | import("./entities/contacts").IContactResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/contacts").IContactInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/contacts").IContactFilters;
                infos?: import("./entities/contacts").IContactInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactResponse[]>;
            (params: {
                filters: import("./entities/contacts").IContactFilters;
                infos?: import("./entities/contacts").IContactInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactResponse>>;
        };
        create: {
            (data: import("./entities/contacts").IContact, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/contacts").IContactCreateResponse[]>;
            (data: import("./entities/contacts").IContact, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/contacts").IContact, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contacts").IContactUpdateResponse>;
            (id: string | number, data: import("./entities/contacts").IContact, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contacts").IContactUpdateResponse>>;
        };
    };
    billsToPay(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/billsToPay").IBillToPayFilters | undefined;
                    infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/billsToPay").IBillToPayFilters | undefined;
                    infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse | import("./entities/billsToPay").IBillToPayResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/billsToPay").IBillToPayFilters;
                infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse[]>;
            (params: {
                filters: import("./entities/billsToPay").IBillToPayFilters;
                infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        create: {
            (data: import("./entities/billsToPay").IBillToPay, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/billsToPay").IBillToPayCreateResponse[]>;
            (data: import("./entities/billsToPay").IBillToPay, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/billsToPay").IBillToPayUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse>;
            (id: string | number, data: import("./entities/billsToPay").IBillToPayUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
    };
    contasAPagar(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/billsToPay").IBillToPayFilters | undefined;
                    infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/billsToPay").IBillToPayFilters | undefined;
                    infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse | import("./entities/billsToPay").IBillToPayResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/billsToPay").IBillToPayInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/billsToPay").IBillToPayFilters;
                infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse[]>;
            (params: {
                filters: import("./entities/billsToPay").IBillToPayFilters;
                infos?: import("./entities/billsToPay").IBillToPayInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
        create: {
            (data: import("./entities/billsToPay").IBillToPay, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/billsToPay").IBillToPayCreateResponse[]>;
            (data: import("./entities/billsToPay").IBillToPay, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/billsToPay").IBillToPayUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToPay").IBillToPayResponse>;
            (id: string | number, data: import("./entities/billsToPay").IBillToPayUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToPay").IBillToPayResponse>>;
        };
    };
    billsToReceive(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/billsToReceive").IBillToReceiveFilters | undefined;
                    infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/billsToReceive").IBillToReceiveFilters | undefined;
                    infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse | import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/billsToReceive").IBillToReceiveFilters;
                infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (params: {
                filters: import("./entities/billsToReceive").IBillToReceiveFilters;
                infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        create: (data: import("./entities/billsToReceive").IBillToReceive, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveCreateResponse> | import("./entities/billsToReceive").IBillToReceiveCreateResponse[]>;
        update: {
            (id: string | number, data: import("./entities/billsToReceive").IBillToReceiveUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse>;
            (id: string | number, data: import("./entities/billsToReceive").IBillToReceiveUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
    };
    contasAReceber(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/billsToReceive").IBillToReceiveFilters | undefined;
                    infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/billsToReceive").IBillToReceiveFilters | undefined;
                    infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse | import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/billsToReceive").IBillToReceiveFilters;
                infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse[]>;
            (params: {
                filters: import("./entities/billsToReceive").IBillToReceiveFilters;
                infos?: import("./entities/billsToReceive").IBillToReceiveInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
        create: (data: import("./entities/billsToReceive").IBillToReceive, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveCreateResponse> | import("./entities/billsToReceive").IBillToReceiveCreateResponse[]>;
        update: {
            (id: string | number, data: import("./entities/billsToReceive").IBillToReceiveUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/billsToReceive").IBillToReceiveResponse>;
            (id: string | number, data: import("./entities/billsToReceive").IBillToReceiveUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/billsToReceive").IBillToReceiveResponse>>;
        };
    };
    contracts(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/contracts").IContractFilters | undefined;
                    infos?: import("./entities/contracts").IContractInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/contracts").IContractFilters | undefined;
                    infos?: import("./entities/contracts").IContractInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/contracts").IContractInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse | import("./entities/contracts").IContractResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/contracts").IContractInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/contracts").IContractFilters;
                infos?: import("./entities/contracts").IContractInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse[]>;
            (params: {
                filters: import("./entities/contracts").IContractFilters;
                infos?: import("./entities/contracts").IContractInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        create: {
            (data: import("./entities/contracts").IContract, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/contracts").IContractCreateResponse[]>;
            (data: import("./entities/contracts").IContract, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/contracts").IContract, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse>;
            (id: string | number, data: import("./entities/contracts").IContract, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractDeleteResponse>>;
        };
    };
    contratos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/contracts").IContractFilters | undefined;
                    infos?: import("./entities/contracts").IContractInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/contracts").IContractFilters | undefined;
                    infos?: import("./entities/contracts").IContractInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/contracts").IContractInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse | import("./entities/contracts").IContractResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/contracts").IContractInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/contracts").IContractFilters;
                infos?: import("./entities/contracts").IContractInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse[]>;
            (params: {
                filters: import("./entities/contracts").IContractFilters;
                infos?: import("./entities/contracts").IContractInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        create: {
            (data: import("./entities/contracts").IContract, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/contracts").IContractCreateResponse[]>;
            (data: import("./entities/contracts").IContract, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/contracts").IContract, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractResponse>;
            (id: string | number, data: import("./entities/contracts").IContract, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractResponse>>;
        };
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/contracts").IContractDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/contracts").IContractDeleteResponse>>;
        };
    };
    ctes(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/ctes").ICteFilters | undefined;
                    infos?: import("./entities/ctes").ICteInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/ctes").ICteResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/ctes").ICteFilters | undefined;
                    infos?: import("./entities/ctes").ICteInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse>>;
        };
        find: (numero: string | number, serie: string | number, options?: {
            params?: import("./entities/ctes").ICteInfos | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/ctes").ICteResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse> | import("./entities/ctes").ICteResponse[]>;
        findBy: {
            (params: {
                filters: import("./entities/ctes").ICteFilters;
                infos?: import("./entities/ctes").ICteInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/ctes").ICteResponse[]>;
            (params: {
                filters: import("./entities/ctes").ICteFilters;
                infos?: import("./entities/ctes").ICteInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse>>;
        };
        create: (data: import("./entities/ctes").ICte, options?: {
            loja?: string | number | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse> | import("./entities/ctes").ICteResponse[]>;
        post: (id: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse> | import("./entities/ctes").ICteResponse[]>;
        update: {
            (id: string | number, data: import("./entities/ctes").ICte, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/ctes").ICteResponse>;
            (id: string | number, data: import("./entities/ctes").ICte, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteResponse>>;
        };
        delete: (id: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/ctes").ICteDeleteResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/ctes").ICteDeleteResponse>>;
    };
    deposits(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/deposits").IDepositFilters | undefined;
                    infos?: import("./entities/deposits").IDepositInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/deposits").IDepositFilters | undefined;
                    infos?: import("./entities/deposits").IDepositInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/deposits").IDepositInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse | import("./entities/deposits").IDepositResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/deposits").IDepositInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/deposits").IDepositFilters;
                infos?: import("./entities/deposits").IDepositInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse[]>;
            (params: {
                filters: import("./entities/deposits").IDepositFilters;
                infos?: import("./entities/deposits").IDepositInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        create: {
            (data: import("./entities/deposits").IDeposit, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/deposits").IDepositResponse[]>;
            (data: import("./entities/deposits").IDeposit, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/deposits").IDeposit, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse>;
            (id: string | number, data: import("./entities/deposits").IDeposit, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
    };
    depositos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/deposits").IDepositFilters | undefined;
                    infos?: import("./entities/deposits").IDepositInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/deposits").IDepositFilters | undefined;
                    infos?: import("./entities/deposits").IDepositInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/deposits").IDepositInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse | import("./entities/deposits").IDepositResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/deposits").IDepositInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/deposits").IDepositFilters;
                infos?: import("./entities/deposits").IDepositInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse[]>;
            (params: {
                filters: import("./entities/deposits").IDepositFilters;
                infos?: import("./entities/deposits").IDepositInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        create: {
            (data: import("./entities/deposits").IDeposit, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/deposits").IDepositResponse[]>;
            (data: import("./entities/deposits").IDeposit, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/deposits").IDeposit, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/deposits").IDepositResponse>;
            (id: string | number, data: import("./entities/deposits").IDeposit, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/deposits").IDepositResponse>>;
        };
    };
    paymentMethods(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/paymentMethods").IPaymentMethodFilters | undefined;
                    infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/paymentMethods").IPaymentMethodFilters | undefined;
                    infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse | import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/paymentMethods").IPaymentMethodFilters;
                infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (params: {
                filters: import("./entities/paymentMethods").IPaymentMethodFilters;
                infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        create: {
            (data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/paymentMethods").IPaymentMethodCreateResponse[]>;
            (data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodCreateResponse>;
            (id: string | number, data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodCreateResponse>>;
        };
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodDeleteResponse>>;
        };
    };
    formasDePagamento(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/paymentMethods").IPaymentMethodFilters | undefined;
                    infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/paymentMethods").IPaymentMethodFilters | undefined;
                    infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse | import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/paymentMethods").IPaymentMethodFilters;
                infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodResponse[]>;
            (params: {
                filters: import("./entities/paymentMethods").IPaymentMethodFilters;
                infos?: import("./entities/paymentMethods").IPaymentMethodInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodResponse>>;
        };
        create: {
            (data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/paymentMethods").IPaymentMethodCreateResponse[]>;
            (data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodCreateResponse>;
            (id: string | number, data: import("./entities/paymentMethods").IPaymentMethod, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodCreateResponse>>;
        };
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/paymentMethods").IPaymentMethodDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/paymentMethods").IPaymentMethodDeleteResponse>>;
        };
    };
    productGroups(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/productGroups").IGroupProductFilters | undefined;
                    infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/productGroups").IGroupProductFilters | undefined;
                    infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/productGroups").IGroupProductInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse | import("./entities/productGroups").IGroupProductResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/productGroups").IGroupProductInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/productGroups").IGroupProductFilters;
                infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse[]>;
            (params: {
                filters: import("./entities/productGroups").IGroupProductFilters;
                infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
    };
    grupoDeProdutos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/productGroups").IGroupProductFilters | undefined;
                    infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/productGroups").IGroupProductFilters | undefined;
                    infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/productGroups").IGroupProductInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse | import("./entities/productGroups").IGroupProductResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/productGroups").IGroupProductInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/productGroups").IGroupProductFilters;
                infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/productGroups").IGroupProductResponse[]>;
            (params: {
                filters: import("./entities/productGroups").IGroupProductFilters;
                infos?: import("./entities/productGroups").IGroupProductInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/productGroups").IGroupProductResponse>>;
        };
    };
    nfces(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/nfces").INfceFilters | undefined;
                    infos?: import("./entities/nfces").INfceInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/nfces").INfceResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/nfces").INfceFilters | undefined;
                    infos?: import("./entities/nfces").INfceInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/nfces").INfceResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/nfces").INfceInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/nfces").INfceResponse | import("./entities/nfces").INfceResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/nfces").INfceInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/nfces").INfceResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/nfces").INfceFilters;
                infos?: import("./entities/nfces").INfceInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/nfces").INfceResponse[]>;
            (params: {
                filters: import("./entities/nfces").INfceFilters;
                infos?: import("./entities/nfces").INfceInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/nfces").INfceResponse>>;
        };
        create: {
            (data: import("./entities/nfces").INfce, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/nfces").INfceCreateResponse[]>;
            (data: import("./entities/nfces").INfce, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/nfces").INfceCreateResponse>>;
        };
        send: (numero: string | number, serie: string | number, options?: {
            sendEmail?: boolean | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/nfces").INfceSendResponse> | import("./entities/nfces").INfceSendResponse[]>;
    };
    invoices(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/invoices").IInvoiceFilters | undefined;
                    infos?: import("./entities/invoices").IInvoiceInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/invoices").IInvoiceResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/invoices").IInvoiceFilters | undefined;
                    infos?: import("./entities/invoices").IInvoiceInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse>>;
        };
        find: (numero: string | number, serie: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/invoices").IInvoiceResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
        send: (numero: string | number, serie: string | number, options?: {
            sendEmail?: boolean | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
        findBy: {
            (params: {
                filters: import("./entities/invoices").IInvoiceFilters;
                infos?: import("./entities/invoices").IInvoiceInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/invoices").IInvoiceResponse[]>;
            (params: {
                filters: import("./entities/invoices").IInvoiceFilters;
                infos?: import("./entities/invoices").IInvoiceInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse>>;
        };
        create: (data: import("./entities/invoices").IInvoice, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
    };
    notasFiscais(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/invoices").IInvoiceFilters | undefined;
                    infos?: import("./entities/invoices").IInvoiceInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/invoices").IInvoiceResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/invoices").IInvoiceFilters | undefined;
                    infos?: import("./entities/invoices").IInvoiceInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse>>;
        };
        find: (numero: string | number, serie: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/invoices").IInvoiceResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
        send: (numero: string | number, serie: string | number, options?: {
            sendEmail?: boolean | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
        findBy: {
            (params: {
                filters: import("./entities/invoices").IInvoiceFilters;
                infos?: import("./entities/invoices").IInvoiceInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/invoices").IInvoiceResponse[]>;
            (params: {
                filters: import("./entities/invoices").IInvoiceFilters;
                infos?: import("./entities/invoices").IInvoiceInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse>>;
        };
        create: (data: import("./entities/invoices").IInvoice, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/invoices").IInvoiceResponse> | import("./entities/invoices").IInvoiceResponse[]>;
    };
    serviceInvoices(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/serviceInvoices").IServiceInvoiceFilters | undefined;
                    infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/serviceInvoices").IServiceInvoiceFilters | undefined;
                    infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse | import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/serviceInvoices").IServiceInvoiceFilters;
                infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (params: {
                filters: import("./entities/serviceInvoices").IServiceInvoiceFilters;
                infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        create: {
            (data: import("./entities/serviceInvoices").IServiceInvoice, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/serviceInvoices").IServiceInvoiceCreateResponse[]>;
            (data: import("./entities/serviceInvoices").IServiceInvoice, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceCreateResponse>>;
        };
        send: (numero: string | number, serie: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceSendResponse> | import("./entities/serviceInvoices").IServiceInvoiceSendResponse[]>;
    };
    notasServicos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/serviceInvoices").IServiceInvoiceFilters | undefined;
                    infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/serviceInvoices").IServiceInvoiceFilters | undefined;
                    infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse | import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/serviceInvoices").IServiceInvoiceFilters;
                infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/serviceInvoices").IServiceInvoiceResponse[]>;
            (params: {
                filters: import("./entities/serviceInvoices").IServiceInvoiceFilters;
                infos?: import("./entities/serviceInvoices").IServiceInvoiceInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceResponse>>;
        };
        create: {
            (data: import("./entities/serviceInvoices").IServiceInvoice, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/serviceInvoices").IServiceInvoiceCreateResponse[]>;
            (data: import("./entities/serviceInvoices").IServiceInvoice, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceCreateResponse>>;
        };
        send: (numero: string | number, serie: string | number, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/serviceInvoices").IServiceInvoiceSendResponse> | import("./entities/serviceInvoices").IServiceInvoiceSendResponse[]>;
    };
    orders(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/orders").IOrderFilters | undefined;
                    infos?: import("./entities/orders").IOrderInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/orders").IOrderFilters | undefined;
                    infos?: import("./entities/orders").IOrderInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/orders").IOrderInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse | import("./entities/orders").IOrderResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/orders").IOrderInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/orders").IOrderFilters;
                infos?: import("./entities/orders").IOrderInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse[]>;
            (params: {
                filters: import("./entities/orders").IOrderFilters;
                infos?: import("./entities/orders").IOrderInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        create: {
            (data: import("./entities/orders").IOrder, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/orders").IOrderResponse[]>;
            (data: import("./entities/orders").IOrder, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/orders").IOrder, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse>;
            (id: string | number, data: import("./entities/orders").IOrder, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
    };
    pedidos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/orders").IOrderFilters | undefined;
                    infos?: import("./entities/orders").IOrderInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/orders").IOrderFilters | undefined;
                    infos?: import("./entities/orders").IOrderInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/orders").IOrderInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse | import("./entities/orders").IOrderResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/orders").IOrderInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/orders").IOrderFilters;
                infos?: import("./entities/orders").IOrderInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse[]>;
            (params: {
                filters: import("./entities/orders").IOrderFilters;
                infos?: import("./entities/orders").IOrderInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        create: {
            (data: import("./entities/orders").IOrder, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/orders").IOrderResponse[]>;
            (data: import("./entities/orders").IOrder, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/orders").IOrder, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/orders").IOrderResponse>;
            (id: string | number, data: import("./entities/orders").IOrder, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/orders").IOrderResponse>>;
        };
    };
    purchaseOrders(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/purchaseOrders").IPurchaseOrderFilters | undefined;
                    infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/purchaseOrders").IPurchaseOrderFilters | undefined;
                    infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse | import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/purchaseOrders").IPurchaseOrderFilters;
                infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (params: {
                filters: import("./entities/purchaseOrders").IPurchaseOrderFilters;
                infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        create: {
            (data: import("./entities/purchaseOrders").IPurchaseOrder, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/purchaseOrders").IPurchaseOrderCreateResponse[]>;
            (data: import("./entities/purchaseOrders").IPurchaseOrder, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/purchaseOrders").IPurchaseOrderUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderUpdateResponse>;
            (id: string | number, data: import("./entities/purchaseOrders").IPurchaseOrderUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderUpdateResponse>>;
        };
    };
    pedidosDeCompra(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/purchaseOrders").IPurchaseOrderFilters | undefined;
                    infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/purchaseOrders").IPurchaseOrderFilters | undefined;
                    infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse | import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/purchaseOrders").IPurchaseOrderFilters;
                infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderResponse[]>;
            (params: {
                filters: import("./entities/purchaseOrders").IPurchaseOrderFilters;
                infos?: import("./entities/purchaseOrders").IPurchaseOrderInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderResponse>>;
        };
        create: {
            (data: import("./entities/purchaseOrders").IPurchaseOrder, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/purchaseOrders").IPurchaseOrderCreateResponse[]>;
            (data: import("./entities/purchaseOrders").IPurchaseOrder, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/purchaseOrders").IPurchaseOrderUpdateContent, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/purchaseOrders").IPurchaseOrderUpdateResponse>;
            (id: string | number, data: import("./entities/purchaseOrders").IPurchaseOrderUpdateContent, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/purchaseOrders").IPurchaseOrderUpdateResponse>>;
        };
    };
    products(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/products").IProductFilters | undefined;
                    infos?: import("./entities/products").IProductInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/products").IProductFilters | undefined;
                    infos?: import("./entities/products").IProductInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/products").IProductInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse | import("./entities/products").IProductResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/products").IProductInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/products").IProductFilters;
                infos?: import("./entities/products").IProductInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse[]>;
            (params: {
                filters: import("./entities/products").IProductFilters;
                infos?: import("./entities/products").IProductInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        create: {
            (data: import("./entities/products").IProduct, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/products").IProductResponse[]>;
            (data: import("./entities/products").IProduct, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        update: (id: string | number, data: import("./entities/products").IProduct, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse> | import("./entities/products").IProductResponse[]>;
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/products").IProductDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductDeleteResponse>>;
        };
        findBySupplierCode: (code: string | number, supplierId: string | number, options?: {
            params?: import("./entities/products").IProductInfos | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/products").IProductResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse> | import("./entities/products").IProductResponse[]>;
    };
    produtos(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/products").IProductFilters | undefined;
                    infos?: import("./entities/products").IProductInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/products").IProductFilters | undefined;
                    infos?: import("./entities/products").IProductInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/products").IProductInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse | import("./entities/products").IProductResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/products").IProductInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/products").IProductFilters;
                infos?: import("./entities/products").IProductInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/products").IProductResponse[]>;
            (params: {
                filters: import("./entities/products").IProductFilters;
                infos?: import("./entities/products").IProductInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        create: {
            (data: import("./entities/products").IProduct, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/products").IProductResponse[]>;
            (data: import("./entities/products").IProduct, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse>>;
        };
        update: (id: string | number, data: import("./entities/products").IProduct, options?: {
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse> | import("./entities/products").IProductResponse[]>;
        delete: {
            (id: string | number, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/products").IProductDeleteResponse>;
            (id: string | number, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductDeleteResponse>>;
        };
        findBySupplierCode: (code: string | number, supplierId: string | number, options?: {
            params?: import("./entities/products").IProductInfos | undefined;
            raw?: boolean | undefined;
        } | undefined) => Promise<import("./entities/products").IProductResponse | import("./core/interfaces/method").IPluralResponse<import("./entities/products").IProductResponse> | import("./entities/products").IProductResponse[]>;
    };
    commercialProposals(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/commercialProposals").ICommercialProposalFilters | undefined;
                    infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/commercialProposals").ICommercialProposalFilters | undefined;
                    infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse | import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/commercialProposals").ICommercialProposalFilters;
                infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (params: {
                filters: import("./entities/commercialProposals").ICommercialProposalFilters;
                infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        create: {
            (data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/commercialProposals").ICommercialProposalCreateResponse[]>;
            (data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalUpdateResponse>;
            (id: string | number, data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalUpdateResponse>>;
        };
    };
    propostasComerciais(): {
        api: import("axios").AxiosInstance;
        raw: boolean;
        singularName: string;
        pluralName: string;
    } & {
        all: {
            (options?: {
                params?: {
                    filters?: import("./entities/commercialProposals").ICommercialProposalFilters | undefined;
                    infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                } | undefined;
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (options?: {
                params?: {
                    filters?: import("./entities/commercialProposals").ICommercialProposalFilters | undefined;
                    infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                } | undefined;
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        find: {
            (id: string | number, options?: {
                params?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse | import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (id: string | number, options?: {
                params?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        findBy: {
            (params: {
                filters: import("./entities/commercialProposals").ICommercialProposalFilters;
                infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
            }, options?: {
                raw?: false | undefined;
                page?: number | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalResponse[]>;
            (params: {
                filters: import("./entities/commercialProposals").ICommercialProposalFilters;
                infos?: import("./entities/commercialProposals").ICommercialProposalInfos | undefined;
            }, options?: {
                raw: true;
                page?: number | undefined;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalResponse>>;
        };
        create: {
            (data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw?: false | undefined;
            } | undefined, ...restData: unknown[]): Promise<import("./entities/commercialProposals").ICommercialProposalCreateResponse[]>;
            (data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw: true;
            } | undefined, ...restData: unknown[]): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalCreateResponse>>;
        };
        update: {
            (id: string | number, data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw?: false | undefined;
            } | undefined): Promise<import("./entities/commercialProposals").ICommercialProposalUpdateResponse>;
            (id: string | number, data: import("./entities/commercialProposals").ICommercialProposal, options?: {
                raw: true;
            } | undefined): Promise<import("./core/interfaces/method").IPluralResponse<import("./entities/commercialProposals").ICommercialProposalUpdateResponse>>;
        };
    };
}
